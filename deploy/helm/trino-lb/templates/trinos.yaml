# 1 small cluster
{{- range untilStep 1 2 1 }}
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCluster
metadata:
  name: trino-s-{{ . }}
  namespace: default
spec:
  image:
    productVersion: "455"
  clusterConfig:
    catalogLabelSelector:
      matchLabels:
        trino: trino
    listenerClass: external-stable
    authentication:
      - authenticationClass: trino-users
    authorization:
      opa:
        configMapName: opa
        package: trino
  coordinators:
    configOverrides: &configOverrides
      config.properties:
        tracing.enabled: "true"
        tracing.exporter.endpoint: http://jaeger-collector.default.svc.cluster.local:4317
    roleGroups:
      default:
        replicas: 1
  workers:
    configOverrides: *configOverrides
    roleGroups:
      default:
        replicas: 1
{{- end }}
# 2 medium clusters
{{- range untilStep 1 3 1 }}
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCluster
metadata:
  name: trino-m-{{ . }}
  namespace: default
spec:
  image:
    productVersion: "455"
  clusterConfig:
    catalogLabelSelector:
      matchLabels:
        trino: trino
    listenerClass: external-stable
    authentication:
      - authenticationClass: trino-users
    authorization:
      opa:
        configMapName: opa
        package: trino
  coordinators:
    configOverrides: &configOverrides
      config.properties:
        tracing.enabled: "true"
        tracing.exporter.endpoint: http://jaeger-collector.default.svc.cluster.local:4317
    roleGroups:
      default:
        replicas: 1
  workers:
    configOverrides: *configOverrides
    roleGroups:
      default:
        replicas: 1
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: trino-users
  namespace: default
type: kubernetes.io/opaque
stringData:
  admin: adminadmin
---
apiVersion: authentication.stackable.tech/v1alpha1
kind: AuthenticationClass
metadata:
  name: trino-users
spec:
  provider:
    static:
      userCredentialsSecret:
        name: trino-users
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: tpch
  namespace: default
  labels:
    trino: trino
spec:
  connector:
    tpch: {}
---
apiVersion: opa.stackable.tech/v1alpha1
kind: OpaCluster
metadata:
  name: opa
  namespace: default
spec:
  image:
    productVersion: 0.67.1
  servers:
    roleGroups:
      default:
        replicas: 1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-opa-bundle
  namespace: default
  labels:
    opa.stackable.tech/bundle: "trino"
data:
  trino.rego: |
    package trino

    import rego.v1

    default allow = false

    # Allow non-batched access
    allow if {
      is_admin
    }
    # Allow batched access
    batch contains i if {
      some i
      input.action.filterResources[i]
      is_admin
    }
    # Corner case: filtering columns is done with a single table item, and many columns inside
    batch contains i if {
      some i
      input.action.operation == "FilterColumns"
      count(input.action.filterResources) == 1
      input.action.filterResources[0].table.columns[i]
      is_admin
    }

    is_admin() if {
      input.context.identity.user == "admin"
    }

    # Allow graceful shutdown, see https://docs.stackable.tech/home/stable/trino/usage-guide/operations/graceful-shutdown/#_authorization_requirements
    allow if {
      input.action.operation == "WriteSystemInformation"
      input.context.identity.user == "graceful-shutdown-user"
    }
